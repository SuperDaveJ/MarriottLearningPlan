@model MILearningPlan.ViewModels.Admin.AssociationsReportViewModel

@{
    ViewBag.Title = "Associations Report";
    var items = new List<SelectListItem>();
}

@section styles {
    <link href="~/css/Admin/AssociationsReport.css" rel="stylesheet" />
}

<div class="row admin-spacing">
    <div class="col-sm-12">
        <div class="report-filters-title">Report Filters</div>
        <hr />
        @using (Html.BeginForm("GetAssociationsReport", "Reports", new { area = "Admin" }, FormMethod.Post, new { id = "reportForm" }))
        {
            @Html.AntiForgeryToken()

            <div class="admin-spacing">
                <div class="row dropdown-div">
                    <div class="col-sm-2">Continents:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @{
                                items.Clear();
                                if (Model.ContinentList != null)
                                {
                                    foreach (var item in Model.ContinentList)
                                    {
                                        items.Add(new SelectListItem() { Value = item.ContinentID.ToString(), Text = item.ContinentName });
                                    }
                                }
                                @Html.DropDownListFor(x => x.ContinentList, items, new { @id = "continentItems", @class = "form-control", @multiple = "multiple" })
                            }
                        </div>
                    </div>
                </div>
                <div class="row dropdown-div">
                    <div class="col-sm-2">Brands:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @{
                                items.Clear();
                                if (Model.BrandList != null)
                                {
                                    foreach (var item in Model.BrandList)
                                    {
                                        items.Add(new SelectListItem() { Value = item.BrandID.ToString(), Text = item.BrandName });
                                    }
                                }
                                @Html.DropDownListFor(x => x.BrandList, items, new { @id = "brandItems", @class = "form-control", @multiple = "multiple" })
                            }
                        </div>
                    </div>
                </div>
                <div class="row dropdown-div">
                    <div class="col-sm-2">Levels:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @{
                                items.Clear();
                                if (Model.LevelList != null)
                                {
                                    foreach (var item in Model.LevelList)
                                    {
                                        items.Add(new SelectListItem() { Value = item.LevelID.ToString(), Text = item.LevelName });
                                    }
                                }
                                @Html.DropDownListFor(x => x.LevelList, items, new { @id = "levelItems", @class = "form-control", @multiple = "multiple" })
                            }
                        </div>
                    </div>
                </div>
                <div class="row dropdown-div">
                    <div class="col-sm-2">Work Areas:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @{
                                items.Clear();
                                if (Model.WorkareaList != null)
                                {
                                    foreach (var item in Model.WorkareaList)
                                    {
                                        items.Add(new SelectListItem() { Value = item.WorkareaID.ToString() + "|" + item.WorkareaType, Text = item.WorkareaName });
                                    }
                                }
                                @Html.DropDownListFor(x => x.WorkareaList, items, new { @id = "workareaItems", @class = "form-control", @multiple = "multiple" })
                            }
                        </div>
                    </div>
                </div>
                <div class="row dropdown-div">
                    <div class="col-sm-2">Functions:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @{
                                items.Clear();
                                if (Model.FunctionList != null)
                                {
                                    foreach (var item in Model.FunctionList)
                                    {
                                        items.Add(new SelectListItem() { Value = item.FunctionID.ToString(), Text = item.FunctionName });
                                    }
                                }
                                @Html.DropDownListFor(x => x.FunctionList, items, new { @id = "functionItems", @class = "form-control", @multiple = "multiple" })
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="admin-spacing">
                <div class="row">
                    <div class="col-sm-2">Course Title:</div>
                    <div class="col-sm-6">
                        <div class="form-group">
                            @Html.TextBoxFor(m => m.CourseTitleSearch, new { @id = "course-title", @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-2">
                        @{
                            foreach (var item in ViewBag.MFTypes)
                            {
                                <div class="radio">
                                    <label>@Html.RadioButtonFor(m => m.MFTypeID, (int?)item.Value, (item.Key == "Both") ? new { @checked = "" } : null)@item.Key</label>
                                </div>
                            }
                        }
                    </div>
                    <div class="col-sm-2">
                        <div class="control-group">
                            <label for="course-start" class="control-label">Starting Course ID</label>
                            @Html.TextBoxFor(m => m.StartCourseID, new { @id = "course-start", @class = "form-control" })
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <div class="control-group">
                            <label for="course-end" class="control-label">Ending Course ID</label>
                            @Html.TextBoxFor(m => m.EndCourseID, new { @id = "course-end", @class = "form-control" })
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="admin-spacing">
    <button id="generateReport" class="btn btn-raised btn-primary">Generate Report</button>
    <img class="popup-loading-image" src="~/images/loading2.gif" />
</div>

<div id="gridContainer" class="admin-spacing">
    <div class="row">
        <div class="col-xs-12">
            <table id="coursesGrid" class="dataTable">
                <thead>
                    <tr>
                        <th>ID
                        <th>Course Title
                        <th>Property
                        <th>Continent
                        <th>Brand
                        <th>Level
                        <th>Work Area
                        <th>Role
                        <th>Mgt Type
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(function () {

            showValidation('success', "The Associations report displays a list of courses and their assigned categories that are associated or mapped to the selections. " +
                "You can select multiple items in the dropdowns to filter the results.  Each dropdown shows all possible items and are not filtered by others above it. " +
                "The Course Title will search based on a partial text match. " +
                "Note: if few selections are made the report may return a very large data set which is not suggested.");

            setupMultiselects();

            // Init grid
            $('#coursesGrid').DataTable({
                paging: true,
                pagingType: "numbers",
                iDisplayLength: 25,
                searching: true,
                ordering: true,
                info: true,
                dom: 'Blfr<t><ip>',
                //sAjaxDataProp: "",
                data: [],
                columns: [
                    { data: 'ProgramID', className: "dt-center" },
                    { data: 'ProgramTitle' },
                    {
                        data: 'LocationType',
                        className: "dt-center",
                        width: "10%"
                    },
                    { data: 'Continent' },
                    { data: 'Brand' },
                    { data: 'EmployeeLevel' },
                    { data: 'Workarea' },
                    { data: 'RoleFunction' },
                    { data: 'ManagementRole', width: "10%" }
                ],
                language: {
                    emptyTable: '(No courses were available for the given selections)'
                },
                //select: "single",
                buttons: [{
                    extend: 'excel',
                    text: '<span class="export-excel-button"></span>',
                    titleAttr: 'Export to Excel',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'pdf',
                    text: '<span class="export-pdf-button"></span>',
                    titleAttr: 'Export to PDF',
                    exportOptions: {
                        columns: ':visible'
                    },
                    orientation: 'landscape'
                }],
                'fnDrawCallback': function () {
                    var rowsPerPage = this.fnSettings()._iDisplayLength;
                    var rowsToShow = this.fnSettings().fnRecordsDisplay();
                    if (rowsToShow <= rowsPerPage || rowsPerPage == -1) {
                        // hide pager if only 1 page
                        $('.dataTables_paginate').css('visibility', 'hidden');
                    }
                    else {
                        $('.dataTables_paginate').css('visibility', 'visible');
                    }
                }

            });

            $('.dataTables_filter label input').addClass('form-control');

            // Load grid data
            $('#generateReport').click(function (e) {
                $('#validationSuccess').hide();
                $('#validationError').hide();
                var form = $('#reportForm');
                $('.popup-loading-image').show();
                $.ajax({
                    type: 'POST',
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function (result) {
                        $('.popup-loading-image').hide();
                        if (result.success) {
                            var oTable = $('#coursesGrid').DataTable();
                            oTable.clear().draw();
                            oTable.rows.add(result.data).draw();
                            $('#gridContainer').css('visibility', 'visible');
                        }
                        else if (result.error) {
                            $('.popup-loading-image').hide();
                            showValidation('error', result.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        $('.popup-loading-image').hide();
                        showValidation('error', '@ViewBag.LoadError');
                    }
                });
                return false;
            });

        });

    </script>
}
